import java.util.*;

public class Anagrams {

    private final Set<String> dictionary;
    private LetterInventory currentLetters;
    private Set<String> currentWordSet;

    public Anagrams(Set<String> dictionary) {
        if(dictionary == null) {
            throw new IllegalArgumentException();
        }
        this.dictionary = dictionary;
    }

    public Set<String> getWords(String phrase) {
        if(phrase == null) {
            throw new IllegalArgumentException();
        }

        currentLetters = new LetterInventory(phrase);
        Set<String> wordSet = new TreeSet<>();

        for(String word: dictionary) {
            if (currentLetters.contains(word)) {
                wordSet.add(word);
            }
        }
        return wordSet;
    }

    public void print(String phrase) {
        if(phrase == null) {
            throw new IllegalArgumentException();
        }
        print(phrase, -1);
    }

    public void print(String phrase, int max) {
        if(phrase == null || max == 0) {
            throw new IllegalArgumentException();
        }
        currentWordSet = getWords(phrase);
        currentLetters = new LetterInventory(phrase);
        Stack<String> tries = new Stack<>();
        print(tries, max);
    }

    private void print (Stack<String> tries, int max) {
        if(currentLetters.isEmpty()) {
            System.out.println(tries);;
        } else if(max != 0) {
            for(String word : currentWordSet) {
                if(word.length() <= currentLetters.size() && currentLetters.contains(word)) {
                    tries.push(word);
                    currentLetters.subtract(word);
                    print(tries, max - 1);
                    tries.pop();
                    currentLetters.add(word);
                }
            }
        }
    }
}
